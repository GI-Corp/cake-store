// <auto-generated />
using System;
using CakeStore.Infrastructure.DAL.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CakeStore.Infrastructure.Migrations
{
    [DbContext(typeof(CakeStoreContext))]
    partial class CakeStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("CakeStore")
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Cake.Cake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Cakes", "CakeStore");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Cake.CakeToUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CakeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CakeId");

                    b.ToTable("CakeToUsers", "CakeStore");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Error", b =>
                {
                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("LanguageId")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<short>("HttpStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Code", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Errors", "CakeStore");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Media.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CakeId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CakeId");

                    b.ToTable("Images", "CakeStore");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Social.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CakeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CakeId");

                    b.HasIndex("UserId", "CakeId");

                    b.ToTable("Reactions", "CakeStore");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Social.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CakeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CakeId");

                    b.ToTable("Reviews", "CakeStore");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.Reference.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Language", "CakeStore");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Cake.Cake", b =>
                {
                    b.HasOne("CakeStore.Domain.Entities.CakeStore.Media.Image", null)
                        .WithMany("Cakes")
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Cake.CakeToUser", b =>
                {
                    b.HasOne("CakeStore.Domain.Entities.CakeStore.Cake.Cake", "Cake")
                        .WithMany()
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Error", b =>
                {
                    b.HasOne("CakeStore.Domain.Entities.Reference.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Media.Image", b =>
                {
                    b.HasOne("CakeStore.Domain.Entities.CakeStore.Cake.Cake", "Cake")
                        .WithMany("CakeImages")
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Cake");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Social.Reaction", b =>
                {
                    b.HasOne("CakeStore.Domain.Entities.CakeStore.Cake.Cake", "Cake")
                        .WithMany("CakeReactions")
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Social.Review", b =>
                {
                    b.HasOne("CakeStore.Domain.Entities.CakeStore.Cake.Cake", "Cake")
                        .WithMany("CakeReviews")
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Cake.Cake", b =>
                {
                    b.Navigation("CakeImages");

                    b.Navigation("CakeReactions");

                    b.Navigation("CakeReviews");
                });

            modelBuilder.Entity("CakeStore.Domain.Entities.CakeStore.Media.Image", b =>
                {
                    b.Navigation("Cakes");
                });
#pragma warning restore 612, 618
        }
    }
}
